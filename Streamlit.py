# üìäYouTube-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ —É Streamlit
import streamlit as st
import pandas as pd
import numpy as np

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ---
st.set_page_config(page_title="YouTube Analytics", layout="wide")
st.title("üìä YouTube –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª—ñ–≤ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)")

# --- 1Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ–º–æ-–¥–∞–Ω–∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ ---
np.random.seed(1)
n = 200
days = np.random.choice(pd.date_range("2025-01-01", "2025-10-01").astype(str), n)
hours = np.random.randint(0, 24, n)
df = pd.DataFrame({
    "title": [f"Video {i+1}" for i in range(n)],
    "views": np.random.randint(100, 20000, n),
    "comments": np.random.randint(0, 500, n),
    "likes": np.random.randint(0, 3000, n),
    "date": [f"{d} {h:02d}:00:00" for d, h in zip(days, hours)],
    "content_type": np.random.choice(["Shorts", "Long-form", "Stream"], n)
})

# --- 2Ô∏è‚É£ –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö ---
df["date"] = pd.to_datetime(df["date"], errors="coerce")
df["day_of_week"] = df["date"].dt.day_name()
df["hour"] = df["date"].dt.hour

# --- 3Ô∏è‚É£ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä (—É—Å—ñ –¥–∞–Ω—ñ) ---
filtered = df.copy()
filtered["engagement_rate"] = ((filtered["likes"] + filtered["comments"]) /
                               filtered["views"].replace(0, np.nan)) * 100

# --- 4Ô∏è‚É£ –ú–µ—Ç—Ä–∏–∫–∏ ---
avg_eng = filtered["engagement_rate"].mean()
total_views = filtered["views"].sum()
total_likes = filtered["likes"].sum()
total_comments = filtered["comments"].sum()

col1, col2, col3, col4 = st.columns(4)
col1.metric("üì∫ –í—ñ–¥–µ–æ", len(filtered))
col2.metric("üëÄ –ü–µ—Ä–µ–≥–ª—è–¥–∏", f"{total_views:,}")
col3.metric("üëç –õ–∞–π–∫–∏", f"{total_likes:,}")
col4.metric("üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ", f"{total_comments:,}")
st.metric("üìà –°–µ—Ä–µ–¥–Ω—ñ–π engagement rate", f"{avg_eng:.2f}%")

# --- 5Ô∏è‚É£ "Heatmap" –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (—ñ–º—ñ—Ç–∞—Ü—ñ—è –∫–æ–ª—å–æ—Ä–∞–º–∏) ---
st.subheader("üî• –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ (—Å–µ—Ä–µ–¥–Ω—ñ –ø–µ—Ä–µ–≥–ª—è–¥–∏ –∑–∞ –¥–µ–Ω—å/–≥–æ–¥–∏–Ω—É)")

pivot = filtered.groupby(["day_of_week", "hour"])["views"].mean().unstack(fill_value=0)
pivot = pivot.reindex(["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"])

max_val = pivot.values.max()
def color_intensity(val):
    if max_val == 0:
        return ""
    intensity = int((val / max_val) * 255)
    color = f"background-color: rgba(255, {255-intensity}, {200-intensity//2}, 0.6);"
    return color

st.dataframe(pivot.style.applymap(color_intensity))

# --- 6Ô∏è‚É£ –¢–æ–ø-10 –≤—ñ–¥–µ–æ ---
st.subheader("üèÜ –¢–æ–ø-10 –≤—ñ–¥–µ–æ –∑–∞ engagement rate")
top10 = filtered.sort_values("engagement_rate", ascending=False).head(10)
st.dataframe(top10[["title", "views", "likes", "comments", "engagement_rate"]])

# --- 7Ô∏è‚É£ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ---
csv = filtered.to_csv(index=False).encode("utf-8")
st.download_button("üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ (CSV)", csv, "youtube_analysis.csv", "text/csv")

st.success("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚Äî —É—Å–µ –≥–æ—Ç–æ–≤–æ!")
